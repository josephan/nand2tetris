// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
  static Array twoToThe;
  static int qy2, resetY;

  /** Initializes the library. */
  function void init() {
    let twoToThe = Array.new(16);
    let twoToThe[0] = 1;
    let twoToThe[1] = 2;
    let twoToThe[2] = 4;
    let twoToThe[3] = 8;
    let twoToThe[4] = 16;
    let twoToThe[5] = 32;
    let twoToThe[6] = 64;
    let twoToThe[7] = 128;
    let twoToThe[8] = 256;
    let twoToThe[9] = 512;
    let twoToThe[10] = 1024;
    let twoToThe[11] = 2048;
    let twoToThe[12] = 4096;
    let twoToThe[13] = 8192;
    let twoToThe[14] = 16384;
    let twoToThe[15] = 32767 + 1;
    let qy2 = 0;
    let resetY = -1;
    return;
  }

  /** Returns the absolute value of x. */
  function int abs(int x) {
    if (x < 0) {
      return x * -1;
    } else {
      return x;
    }
  }

  /** Returns the product of x and y. 
   *  When a Jack compiler detects the multiplication operator '*' in the 
   *  program's code, it handles it by invoking this method. In other words,
   *  the Jack expressions x*y and multiply(x,y) return the same value.
   */
  function int multiply(int x, int y) {
    var int sum;
    var int shiftedX;
    var int i;

    let sum = 0;
    let shiftedX = x;
    let i = 0;

    while (i < 16) {
      if (Math.bit(y, i)) {
        let sum = sum + shiftedX;
      }
      let shiftedX = shiftedX + shiftedX;
      let i = i + 1;
    }
    return sum;
  }

  function boolean bit(int x, int i) {
    return ((x & twoToThe[i]) = twoToThe[i]);
  }

  /** Returns the integer part of x/y.
   *  When a Jack compiler detects the multiplication operator '/' in the 
   *  program's code, it handles it by invoking this method. In other words,
   *  the Jack expressions x/y and divide(x,y) return the same value.
   */
  function int divide(int x, int y) {
    var int q;
    var boolean negX, negY;
    
    if (resetY < 0) { let resetY = y; }

    let negX = x < 0;
    let negY = y < 0;
    let x = Math.abs(x);
    let y = Math.abs(y);

    if ((y > x) | (y < 0)) { return 0; }

    let q = Math.divide(x, y + y);

    if ((x - qy2) < y) {
      if (resetY = y) {
        let qy2 = 0;
        let resetY = -1;
      }
      return q + q;
    } else {
      if (resetY = y) {
        let qy2 = 0;
        let resetY = -1;
      } else {
        let qy2 = qy2 + y;
      }
      if (negX = negY) {
        return q + q + 1;
      } else {
        return -(q + q + 1);
      }
    }
  }

  /** Returns the integer part of the square root of x. */
  function int sqrt(int x) {
    var int low, high, mid, mid2;
    let low = 0;
    let high = x / 2;

    while (~(mid = low)) {
      let mid = (low + high) / 2; 
      let mid2 = mid * mid;
      if (mid2 = x) { return mid; }
      if (mid2 > x) {
        let high = mid;
      } else {
        let low = mid;
      }
    }

    return low;
  }

  /** Returns the greater number. */
  function int max(int a, int b) {
    if (a > b) {
      return a;
    } else {
      return b;
    }
  }

  /** Returns the smaller number. */
  function int min(int a, int b) {
    if (a < b) {
      return a;
    } else {
      return b;
    }
  }
}
