// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
  static boolean colorIsBlack;

  /** Initializes the Screen. */
  function void init() {
    let colorIsBlack = true;
    return;
  }

  /** Erases the entire screen. */
  function void clearScreen() {
    var int start, end;

    let start = 16384;
    let end = 24576;

    while (start < end) {
      do Memory.poke(start, 0);
      let start = start + 1;
    }

    return;
  }

  /** Sets the current color, to be used for all subsequent drawXXX commands.
   *  Black is represented by true, white by false. */
  function void setColor(boolean b) {
    let colorIsBlack = b;
    return;
  }

  function int modifyBit(int num, int pos, boolean color) {
    var int mask;
    let mask = Screen.bitShift(1, pos);
    if (color) {
      return num | mask;  
    } else {
      return num & ~mask;
    }
  }

  function int bitShift(int b, int p) {
    var int i;
    let i = 0;
    while (i < p) {
      let b = b + b;
      let i = i + 1;
    }
    return b;
  }

  /** Draws the (x,y) pixel, using the current color. */
  function void drawPixel(int x, int y) {
    var int address, value, xDiv16, pos;

    let xDiv16 = x / 16;
    let address = 16384 + (32*y) + xDiv16;
    let value = Memory.peek(address);
    let pos = x - (xDiv16*16);
    let value = Screen.modifyBit(value, pos, colorIsBlack);

    do Memory.poke(address, value);
    return;
  }

  /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
  function void drawLine(int x1, int y1, int x2, int y2) {
    var int x, y, dx, dy, a, b, diff, drawX, drawY;
    var boolean xDir, yDir;

    let x = x1;
    let y = y1;
    let xDir = x2 > x1;
    let yDir = y2 > y1;
    let dx = Math.abs(x2 - x1);
    let dy = Math.abs(y2 - y1);
    let a = 0;
    let b = 0;
    let diff = 0;

    if (y1 = y2) {
      while ((a < dx) | (a = dx)) {
        if (xDir) {
          let drawX = x+a;
        } else {
          let drawX = x-a;
        }
        do Screen.drawPixel(drawX, y1);
        let a = a+1;
      }

      return;
    }

    while (((a < dx) | (a = dx)) & (((b < dy) | (b = dy)))) {
      if (xDir) {
        let drawX = x+a;
      } else {
        let drawX = x-a;
      }
      if (yDir) {
        let drawY = y+b;
      } else {
        let drawY = y-b;
      }
      do Screen.drawPixel(drawX, drawY);
      if (diff < 0) {
        let a = a + 1;
        let diff = diff + dy;
      } else {
        let b = b + 1;
        let diff = diff - dx;
      }
    }
    
    return;
  }

  /** Draws a filled rectangle whose top left corner is (x1, y1)
   * and bottom right corner is (x2,y2), using the current color. */
  function void drawRectangle(int x1, int y1, int x2, int y2) {
    var int y;
    let y = y1;

    while ((y < y2) | (y = y2)) {
      do Screen.drawLine(x1, y, x2, y);
      let y = y+1;
    }
    return;
  }

  /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
  function void drawCircle(int x, int y, int r) {
    var int dy, x1, x2, y1, y2, hypt;


    if (r > 181) { return; }
    let dy = -r;

    while ((dy < r) | (dy = r)) {
      let hypt = Math.sqrt((r*r)-(dy*dy));
      let x1 = x - hypt;
      let y1 = y + dy;
      let x2 = x + hypt;
      let y2 = y + dy;
      do Screen.drawLine(x1, y1, x2, y2);
      
      let dy = dy + 1;
    }

    return;
  }
}
