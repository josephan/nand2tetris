// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
  field Array str;
  field length length;

  /** constructs a new empty string with a maximum length of maxLength
   *  and initial length of 0. */
  constructor String new(int maxLength) {
    if (maxLength = 0) { let maxLength = maxLength + 1; }
    let str = Array.new(maxLength);
    let length = 0;
    return this;
  }

  /** Disposes this string. */
  method void dispose() {
    do Memory.deAlloc(this);
    return;
  }

  /** Returns the current length of this string. */
  method int length() {
    return length;
  }

  /** Returns the character at the j-th location of this string. */
  method char charAt(int j) {
    return str[j];
  }

  /** Sets the character at the j-th location of this string to c. */
  method void setCharAt(int j, char c) {
    let str[j] = c;
    return;
  }

  /** Appends c to this string's end and returns this string. */
  method String appendChar(char c) {
    let str[length] = c;
    let length = length + 1;
    return this;
  }

  /** Erases the last character from this string. */
  method void eraseLastChar() {
    let length = length - 1;
    let str[length] = null;
    return;
  }

  /** Returns the integer value of this string, 
   *  until a non-digit character is detected. */
  method int intValue() {
    var int val, i, d;
    var boolean negate;

    let negate = false;
    let val = 0;
    let i = 0;
    let d = 0;

    if (str[0] = 45) {
      let negate = true;
      let str[0] = 48;
    }

    while (i < length) {
      let d = str[i] - 48;
      if ((d < 0) | (d > 9)) { return val; }
      let val = val * 10 + d;
      let i = i + 1;
    } 

    if (negate) {
      return -val;
    } else {
      return val;
    }
  }

  /** Sets this string to hold a representation of the given value. */
  method void setInt(int val) {
    do resetString();
    do String.intToString(this, val);
    return;
  }

  method void resetString() {
    var int i, lengthCopy;
    let lengthCopy = length; 
    let i = 0;
    while (i < lengthCopy) {
      do eraseLastChar();
      let i = i + 1;
    }
    return;
  }

  function String intToString(String str, int val) {
    var int div10, lastDigit, c;
    var boolean negative;
  
    let negative = val < 0;
    let val = Math.abs(val);
    let div10 = val / 10;
    let lastDigit = val - (div10 * 10);
    let c = lastDigit + 48;

    if (negative) { do str.appendChar(45); }

    if (val < 10) {
      return str.appendChar(c);
    } else {
      let str = String.intToString(str, div10);
      return str.appendChar(c);
    }
  }

  /** Returns the new line character. */
  function char newLine() {
    return 128;
  }

  /** Returns the backspace character. */
  function char backSpace() {
    return 129;
  }

  /** Returns the double quote (") character. */
  function char doubleQuote() {
    return 34;
  }
}
